{"version":3,"sources":["monster.js","active.js","passive.js","saveButton.js","saveModel.js","savesCollection.js","saveItemView.js","saveEmptyView.js","savesLoadingView.js","savesCollectionView.js","app.js","main.js"],"names":["nfCookieMonster","set","name","value","days","path","secure","date","Date","expires","type","valueToUse","secureFlag","setTime","getTime","toUTCString","window","encodeURIComponent","JSON","stringify","v","document","cookie","get","nameEQ","ca","split","firstChar","parsed","i","length","c","charAt","substring","indexOf","decodeURIComponent","parse","e","remove","this","increment","parseInt","decrement","nfSaveProgressActiveController","Marionette","Object","extend","endpoint","nfSaveProgress","restApiEndpoint","initialize","options","listenTo","Backbone","Radio","channel","onFormLoaded","onFormRenderView","formModel","save_actions","_","each","action","actionID","active","reply","formLayoutView","currentUserID","model","saveField","findWhere","jQuery","renderSaveTable","loadLastSave","loading","SavesLoadingView","render","requestData","_wpnonce","wpApiSettings","nonce","ajax","url","data","request","cache","success","textStatus","jqXHR","$el","slideUp","saves","save","pop","save_id","fields","error","collection","SavesCollection","fetch","SavesCollectionView","nfSaveProgressPassiveController","storage","localStorage","nfRadio","onFormRendered","formView","formData","getItem","onChangeModelValue","removeItem","fieldModel","formID","fieldData","setItem","nfSaveProgressSaveButtonController","maybeValidate","registerHandlers","maybeHide","click","getExtra","formChannel","beforeSubmit","reset","bind","response","registerSubmitHandlers","trigger","fieldView","setTimeout","saveData","settings","hide_complete","form_id","hide","console","log","SaveModel","Model","Collection","models","setAuthHeaders","xhr","setRequestHeader","sync","method","beforeSend","SaveItemView","ItemView","tagName","className","template","events","click .load","target","closest","find","removeClass","addClass","click .cancel","fieldsCollection","defaults","templateHelpers","view","updated","columns","$return","column","filter","field","savedField","id","fieldValue","SaveEmptyView","on","afterRender","that","el","CompositeView","childView","emptyView","childViewContainer","collectionView","onRender","parent","show","headers","NF_SaveProgress","Application","getfieldAttributes","updateFieldsCollection","key","omit","atts","map","attributes","object","savedFields","fieldID","visible","toString","ready","$","start"],"mappings":"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","file":"front-end.min.js","sourcesContent":["/*!\n * cookie-monster - a simple cookie library\n * v0.3.0\n * https://github.com/jgallen23/cookie-monster\n * copyright Greg Allen 2014\n * MIT License\n */\n/*\n * MODIFICATIONS: renamed assigned variable name to avoid conflicts.\n */\nvar nfCookieMonster = {\n    set: function(name, value, days, path, secure) {\n        var date = new Date(),\n            expires = '',\n            type = typeof(value),\n            valueToUse = '',\n            secureFlag = '';\n        path = path || \"/\";\n        if (days) {\n            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n            expires = \"; expires=\" + date.toUTCString();\n        }\n        if (type === \"object\"  && type !== \"undefined\") {\n            if(!(\"JSON\" in window)) throw \"Bummer, your browser doesn't support JSON parsing.\";\n            valueToUse = encodeURIComponent(JSON.stringify({v:value}));\n        } else {\n            valueToUse = encodeURIComponent(value);\n        }\n        if (secure){\n            secureFlag = \"; secure\";\n        }\n\n        document.cookie = name + \"=\" + valueToUse + expires + \"; path=\" + path + secureFlag;\n    },\n    get: function(name) {\n        var nameEQ = name + \"=\",\n            ca = document.cookie.split(';'),\n            value = '',\n            firstChar = '',\n            parsed={};\n        for (var i = 0; i < ca.length; i++) {\n            var c = ca[i];\n            while (c.charAt(0) == ' ') c = c.substring(1, c.length);\n            if (c.indexOf(nameEQ) === 0) {\n                value = decodeURIComponent(c.substring(nameEQ.length, c.length));\n                firstChar = value.substring(0, 1);\n                if(firstChar==\"{\"){\n                    try {\n                        parsed = JSON.parse(value);\n                        if(\"v\" in parsed) return parsed.v;\n                    } catch(e) {\n                        return value;\n                    }\n                }\n                if (value==\"undefined\") return undefined;\n                return value;\n            }\n        }\n        return null;\n    },\n    remove: function(name) {\n        this.set(name, \"\", -1);\n    },\n    increment: function(name, days) {\n        var value = this.get(name) || 0;\n        this.set(name, (parseInt(value, 10) + 1), days);\n    },\n    decrement: function(name, days) {\n        var value = this.get(name) || 0;\n        this.set(name, (parseInt(value, 10) - 1), days);\n    }\n};","/**\n * Save User Progress Active Controller\n */\nvar nfSaveProgressActiveController = Marionette.Object.extend({\n\n    endpoint: nfSaveProgress.restApiEndpoint || '',\n\n    initialize: function( options ) {\n        this.listenTo( Backbone.Radio.channel( 'form' ), 'loaded', this.onFormLoaded );\n        this.listenTo( Backbone.Radio.channel( 'form' ), 'render:view', this.onFormRenderView );\n    },\n\n    onFormLoaded: function( formModel ) {\n        var save_actions = formModel.get( 'save_progress_actions' );\n        if( 'undefined' == typeof save_actions ) return;\n\n        _.each( save_actions, function( action, actionID ){\n            if( 'undefined' == typeof action.active ) return;\n            Backbone.Radio.channel( 'actions-' + actionID ).reply( 'get:status', function(){\n                return ( 1 == action.active );\n            } )\n        } );\n    },\n\n    onFormRenderView: function( formLayoutView ) {\n\n        if( ! nfSaveProgress.currentUserID ) return;\n\n        var formModel = formLayoutView.model;\n\n        var saveField = formModel.get( 'fields' ).findWhere( { type: 'save' } );\n\n        if( 'undefined' == typeof saveField ) {\n            jQuery( '#formSave' + formModel.get( 'id' ) ).remove();\n            return;\n        }\n\n        if( formModel.get( 'save_progress_allow_multiple' ) ){\n            return this.renderSaveTable( formModel );\n        }\n\n        return this.loadLastSave( formModel );\n    },\n\n    loadLastSave: function( formModel ) {\n\n        // render loading view\n        var loading = new SavesLoadingView();\n        loading.render();\n\n        var requestData = {\n            _wpnonce: wpApiSettings.nonce,\n        };\n\n        jQuery.ajax({\n            url: this.endpoint + 'saves/' + formModel.get( 'id' ),\n            type: 'GET',\n            data: Backbone.Radio.channel( 'save-progress' ).request( 'getSavesRequestData', requestData ) || requestData,\n            cache: false,\n            success: function( data, textStatus, jqXHR ){\n                jQuery( loading.$el ).slideUp( 400, function(){\n                    loading.remove();\n                });\n\n                if( 0 == data.saves.length ) {\n                    jQuery( '#formSave' + formModel.get( 'id' ) ).remove();\n                    return;\n                }\n\n                var save = data.saves.pop();\n\n                formModel.set( 'save_id', save.save_id );\n\n                var fields = JSON.parse( save.fields );\n\n                Backbone.Radio.channel( 'forms' ).request( 'save:updateFieldsCollection',\n                    formModel.get( 'id' ),\n                    fields\n                );\n\n                jQuery( '#formSave' + formModel.get( 'id' ) ).remove();\n            },\n            error: function(){\n\n            }\n        });\n    },\n\n    renderSaveTable: function( formModel ) {\n\n        // render loading view\n        var loading = new SavesLoadingView();\n        loading.render();\n\n        var collection = new SavesCollection( [], {\n            formModel: formModel\n        });\n        collection.fetch({\n            success: function(){\n                loading.remove();\n                var collectionView = new SavesCollectionView( {\n                    collection: collection,\n                } );\n            }\n        });\n    },\n\n});\n","/**\n * Save Progress Passive Controller\n */\nvar nfSaveProgressPassiveController = Marionette.Object.extend({\n\n    initialize: function( options ) {\n\n        this.storage = window.localStorage;\n\n        this.listenTo( nfRadio.channel( 'form' ), 'render:view', this.onFormRendered );\n    },\n\n    onFormRendered: function( formView ) {\n        var formModel = formView.model;\n\n        if( ! formModel.get( 'save_progress_passive_mode' ) ) return;\n\n        var formData = this.storage.getItem( 'nfForm-' + formModel.get( 'id' ) );\n\n        Backbone.Radio.channel( 'forms' ).request( 'save:updateFieldsCollection',\n            formModel.get( 'id' ),\n            JSON.parse( formData )\n        );\n\n        // if( ! formData ) return;\n        //\n        // _.each( formData, function( fieldValue, fieldID ){\n        //     var fieldModel = formModel.get( 'fields' ).get( fieldID );\n        //\n        //     if( 'undefined' == typeof fieldModel ) return;\n        //\n        //     fieldModel.set( 'value', fieldValue );\n        //     fieldModel.trigger( 'reRender' );\n        // });\n\n        // console.log( this.cookie.get( 'nfForm-' + formModel.get( 'id' ) ) );\n\n        this.listenTo( nfRadio.channel( 'fields' ), 'change:modelValue', this.onChangeModelValue );\n        this.listenTo( nfRadio.channel( 'form-' + formModel.get( 'id' ) ), 'submit:response', function(){\n            this.storage.removeItem( 'nfForm-' + formModel.get( 'id' ) );\n        } );\n    },\n\n    onChangeModelValue: function( fieldModel ) {\n\n        var name = 'nfForm-' + fieldModel.get( 'formID' );\n\n        var formID    = fieldModel.get( 'formID' );\n        var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\n\n        if( 'undefined' == typeof formModel ) return;\n        if( ! formModel.get( 'save_progress_passive_mode' ) ) return;\n\n        // var formData = this.cookie.get( name ) || {};\n        // formData[ fieldModel.get( 'id' ) ] = fieldModel.get( 'value' );\n\n        var fieldData = Backbone.Radio.channel( 'forms' ).request( 'save:fieldAttributes', formID );\n\n        this.storage.setItem( name, JSON.stringify( fieldData ) );\n    },\n\n});\n","/**\n * Save Progress Save Button Controller\n */\nvar nfSaveProgressSaveButtonController = Marionette.Object.extend({\n\n    endpoint: '',\n\n    initialize: function( options ) {\n        this.endpoint = nfSaveProgress.restApiEndpoint || '';\n\n        Backbone.Radio.channel( 'forms' ).reply( 'maybe:validate', this.maybeValidate );\n\n        this.listenTo( nfRadio.channel( 'save' ), 'init:model', this.registerHandlers );\n        this.listenTo( nfRadio.channel( 'save' ), 'render:view', this.maybeHide );\n        this.listenTo( nfRadio.channel( 'save' ), 'click:field', this.click );\n    },\n\n    maybeValidate: function( formModel ) {\n        if( formModel.getExtra( 'saveProgress' ) ) return false;\n    },\n\n    registerHandlers: function( fieldModel ) {\n         var formChannel = Backbone.Radio.channel( 'form-' + fieldModel.get( 'formID' ) );\n        fieldModel.listenTo( formChannel, 'before:submit', this.beforeSubmit, fieldModel );\n        fieldModel.listenTo( formChannel, 'submit:cancel',   this.reset.bind( fieldModel ) );\n        fieldModel.listenTo( formChannel, 'submit:response', this.reset.bind( fieldModel ) );\n        fieldModel.listenTo( formChannel, 'submit:response', this.response.bind( this ) );\n\n         var formID = fieldModel.get( 'formID' );\n         fieldModel.listenTo( formChannel, 'submit:failed', function(){\n             Backbone.Radio.channel( 'form-' + formID ).request( 'remove:extra', 'saveProgress' );\n         } );\n         fieldModel.listenTo( formChannel, 'submit:response', function(){\n             Backbone.Radio.channel( 'form-' + formID ).request( 'remove:extra', 'saveProgress' );\n         } );\n\n        // Add progress to Save field submission data.\n        Backbone.Radio.channel( 'save' ).reply( 'get:submitData', function( fieldData ){\n            formID = fieldModel.get( 'formID' );\n            var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\n\n            if( 'undefined' != typeof formModel ){\n                fieldData.save_id = formModel.get( 'save_id' );\n            }\n\n            return fieldData;\n        } );\n        this.listenTo( nfRadio.channel( 'submit' ), 'init:model', this.registerSubmitHandlers );\n    },\n\n    registerSubmitHandlers: function( fieldModel ) {\n        fieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'before:submit', function( formModel ){\n\n            // If this isn't a save, then bail.\n            if( ! Backbone.Radio.channel( 'form-' + formModel.get( 'id' ) ).request( 'get:extra', 'saveProgress' ) ) return;\n\n            // Reset the submit button's label, because this is a save, not a submit.\n            if ( 'undefined' != typeof this.get( 'oldLabel' ) ) {\n                this.set( 'label', this.get( 'oldLabel' ) );\n            }\n            this.set( 'disabled', true );\n            this.trigger( 'reRender' );\n        }, fieldModel );\n    },\n\n    beforeSubmit: function() {\n        this.set( 'disabled', true );\n        this.trigger( 'reRender' );\n    },\n\n    maybeHide: function( fieldView ) {\n        if( nfSaveProgress.currentUserID ) return;\n        setTimeout(function(){\n            fieldView.remove();\n        }, 500);\n    },\n\n    click: function( e, fieldModel ) {\n\n        fieldModel.set( 'disabled', true );\n        fieldModel.set( 'oldLabel', fieldModel.get( 'label' ) );\n        fieldModel.set( 'label', fieldModel.get( 'processing_label' ) );\n        fieldModel.trigger( 'reRender' );\n\n        var formID    = fieldModel.get( 'formID' );\n        var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\n\n        // Flag the submission as a Save.\n        var saveData = Backbone.Radio.channel( 'forms' ).request( 'save:fieldAttributes', formID );\n        Backbone.Radio.channel( 'form-' + formID ).request( 'add:extra', 'saveProgress', saveData );\n\n        // Submit the form.\n        Backbone.Radio.channel( 'form-' + formID ).request( 'submit', formModel );\n    },\n\n    response: function( response, textStatus, jqXHR, formID ) {\n\n        /* If we are hiding the form, then also hide the saves table. */\n        if( 1 == response.data.settings.hide_complete ){\n            jQuery( '#formSave' + response.data.form_id ).hide();\n        }\n    },\n\n    reset: function(){\n        console.log( this );\n        this.set( 'disabled', false );\n        if( 'undefined' != typeof this.get( 'oldLabel' ) ) {\n            this.set('label', this.get('oldLabel'));\n        }\n        this.trigger( 'reRender' );\n    }\n\n});\n","var SaveModel = Backbone.Model.extend( {\n\n    parse: function( response, options )\n    {\n        response.fields = JSON.parse( response.fields );\n        return response;\n    }\n});\n","var SavesCollection = Backbone.Collection.extend( {\n    model: SaveModel,\n\n    url: function() {\n        var formID = this.formModel.get( 'id' );\n        return nfSaveProgress.restApiEndpoint + 'saves/' + formID;\n    },\n\n    initialize: function( models, options ) {\n        this.formModel = options.formModel;\n    },\n\n    parse: function( response ){\n        if( 'undefined' == typeof response.saves ) return;\n        return response.saves;\n    },\n\n    setAuthHeaders: function( xhr ) {\n        // If we have a localized nonce, pass that along with each sync.\n        if ( 'undefined' !== typeof wpApiSettings.nonce ) {\n            xhr.setRequestHeader( 'X-WP-Nonce', wpApiSettings.nonce );\n        }\n    },\n\n    // https://developer.wordpress.org/rest-api/using-the-rest-api/authentication/\n    sync: function( method, model, options ) {\n        options = options || {};\n        options.beforeSend = this.setAuthHeaders;\n\n        // Continue by calling Bacckbone's sync.\n        return Backbone.sync( method, model, options );\n    }\n});\n","var SaveItemView = Marionette.ItemView.extend({\n    tagName: 'tr',\n    className: 'nf-saves-item',\n    template: '#tmpl-nf-save-item',\n\n    events: {\n        'click .load': function( e ){\n\n            jQuery( e.target ).closest( '.nf-saves-cont' ).find( '.active' ).removeClass( 'active' );\n            jQuery( e.target ).closest( 'tr' ).addClass( 'active' );\n\n            var formID = this.model.get( 'form_id' );\n            Backbone.Radio.channel( 'forms' ).request( 'save:updateFieldsCollection', formID,\n                this.model.get( 'fields' )\n            );\n\n            var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\n            if( 'undefined' != typeof formModel ){\n                formModel.set( 'save_id', this.model.get( 'save_id' ) );\n            }\n        },\n        'click .cancel': function( e ){\n            jQuery( e.target ).closest( 'tr' ).removeClass( 'active' );\n\n            var formID = this.model.get( 'form_id' );\n            var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\n            var fieldsCollection = formModel.get( 'fields' );\n            var defaults = formModel.get( 'loadedFields' );\n            fieldsCollection.reset( defaults );\n        }\n    },\n\n    templateHelpers: function(){\n        var view = this;\n        return {\n            updated: this.model.get( 'updated' ),\n            columns: function(){\n                var formModel = nfRadio.channel( 'app' ).request( 'get:form', view.model.get( 'form_id' ) );\n                var columns = formModel.get( 'save_progress_table_columns' );\n                var $return = '';\n                _.each( columns, function( column ){\n                    // .filter was .find, .find is not supported by IE\n                    var fieldModel = formModel.get( 'fields' ).filter( function( field ){\n                       return column.field ==  field.get( 'key' );\n                    });\n                    // .filter was .find, .find is not supported by IE\n                    var savedField = view.model.get( 'fields' ).filter( function( field ){\n                        if( 'undefined' != typeof ( fieldModel ) ) {\n                            /**\n                             * Becuase we used .filter instead of .find above for\n                             * fieldModel, it returns a an array\n                             * and we must access the first. We only expect one.\n                             */\n                            return fieldModel[ 0 ].get( 'id' ) == field.id;\n                        } else {\n                            return '';\n                        }\n                    });\n                    /**\n                     * Becuase we used .filter above instead of .find for savedField,\n                     * it returns a an array\n                     * and we must access the first. We only expect one.\n                     */\n                    var fieldValue = ( 'undefined' != typeof savedField[ 0 ] ) ? savedField[ 0 ].value : '';\n                    $return += '<td>' + fieldValue + '</td>';\n                })\n                return $return;\n            }\n        }\n    }\n});\n","var SaveEmptyView = Marionette.ItemView.extend({\n    tagName: 'nf-save',\n    template: '#tmpl-nf-save-empty',\n\n    initialize: function() {\n        this.on( 'render', this.afterRender );\n    },\n\n    afterRender: function(){\n        var that = this;\n        setTimeout(function(){\n            jQuery( that.$el ).slideUp( 'slow', function(){\n                that.remove();\n            });\n        }, 2000);\n    }\n});\n","var SavesLoadingView = Marionette.ItemView.extend({\n    tagName: \"nf-section\",\n    template: \"#tmpl-nf-saves-loading\",\n    el: \".form-save-loading\"\n});\n","var SavesCollectionView = Marionette.CompositeView.extend({\n    tagName: 'table',\n    childView: SaveItemView,\n    emptyView: SaveEmptyView,\n    childViewContainer: 'tbody',\n    template: '#tmpl-nf-save-table',\n\n    initialize: function( options ){\n\n        var formID = this.collection.formModel.get( 'id' );\n        // Set element selector\n        this.el = '#formSave' + formID + ' table';\n\n        // Update element cache\n        this.$el = jQuery( this.el );\n\n        this.render();\n\n        this.listenTo( Backbone.Radio.channel( 'form-' + formID ), 'submit:response', function(){\n            var collectionView = this;\n            this.collection.fetch({\n                success: function(){\n                    collectionView.render();\n                }\n            });\n        }, this );\n    },\n\n    onRender: function(){\n        if( 0 == this.collection.length ){\n            this.$el.hide();\n            this.$el.parent().hide();\n        } else {\n            this.$el.show();\n            this.$el.parent().show();\n        }\n    },\n\n    templateHelpers: function(){\n        var view = this;\n        return {\n            headers: function(){\n                var formModel = view.collection.formModel;\n                var columns = formModel.get( 'save_progress_table_columns' );\n                var $return = '';\n                _.each( columns, function( column ){\n                    var fieldModel = formModel.get( 'fields' ).find( function( field ){\n                        return column.field ==  field.get( 'key' );\n                    });\n                    if( 'undefined' != typeof( fieldModel ) ) {\n                        $return += '<th>' + fieldModel.get( 'label' ) + '</th>';\n                    } else {\n                        $return += '<th></th>';\n                    }\n                });\n                return $return;\n            }\n        }\n    }\n});\n","var NF_SaveProgress = Marionette.Application.extend({\n\n    initialize: function( options ){\n\n        // Load Controllers.\n        new nfSaveProgressActiveController();\n        new nfSaveProgressSaveButtonController();\n        new nfSaveProgressPassiveController();\n\n        Backbone.Radio.channel( 'forms' ).reply( 'save:fieldAttributes', this.getfieldAttributes, this );\n        Backbone.Radio.channel( 'forms' ).reply( 'save:updateFieldsCollection', this.updateFieldsCollection, this );\n    },\n\n    getfieldAttributes: function( formID ) {\n        var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\n\n        var fields = formModel.get( 'fields' ).filter( function( fieldModel, key ){\n            if ( 'html' == fieldModel.get( 'type' ) ) return false;\n            // If we don't have a value...\n            // AND our field is anything other than a table editor...\n            if ( ! fieldModel.get( 'value' ) && 'table_editor' != fieldModel.get( 'type' ) ) return false;\n            // If the model is clean...\n            // AND it has a type of anything other than file upload or table editor...\n            if ( fieldModel.get( 'clean' ) && 'file_upload' != fieldModel.get( 'type' ) && 'table_editor' != fieldModel.get( 'type' ) ) return false;\n            return true;\n        });\n\n        var omit = [\n            /* core */ 'admin_label', 'element_class', 'required', 'container_class', 'custom_mask','mask', 'manual_key', 'drawerDisabled', 'input_limit', 'input_limit_msg', 'input_limit_type', 'help_text', 'desc_text', 'created_at', 'editActive', 'disabled', 'afterField', 'beforeField', 'classes', 'confirm_field', 'element_templates', 'errors', 'formID', 'key', 'label', 'label_pos', 'mirror_field', 'objectDomain', 'objectType', 'old_classname', 'order', 'parentType', 'placeholder', 'reRender', 'type', 'wrap_template',\n            /* List Fields */ 'options',\n            /* Table Editor */ 'hot', 'tableConfig',\n            /* File Uploads */ 'uploadNonce', 'upload_types',\n            /* Layout & Styles */ 'cellcid'\n        ];\n\n        // Attributes to be saved.\n        var atts = fields.map( function( fieldModel, key ) {\n            return _.omit( fieldModel.attributes, function( value, key, object ){\n\n                // Omit function properties.\n                if( 'function' == typeof value ) return true;\n\n                // Omit known \"non-essential\" core attributes.\n                if( -1 !== omit.indexOf( key ) ) return true;\n\n                // Omit Layout & Styles attributes.\n                if( -1 !== key.indexOf( '_styles_' ) ) return true;\n               return false;\n            });\n        });\n        return atts;\n    },\n\n    updateFieldsCollection: function( formID, savedFields ){\n        var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\n        var fieldsCollection = formModel.get( 'fields' );\n\n        var defaults = formModel.get( 'loadedFields' );\n        fieldsCollection.reset( defaults );\n\n        _.each( savedFields, function( savedField ){\n            var fieldID = parseInt( savedField.id );\n            var field   = fieldsCollection.get( fieldID );\n            var atts    = _.omit( savedField, [\n                /* Core */ 'id', 'required',\n                /* File Uploads */ 'uploadNonce', 'upload_types'\n            ] );\n\n            // Force `visible` attribute to a String\n            if( 'undefined' != typeof atts.visible ) {\n                atts.visible = atts.visible.toString();\n            }\n\n            if( 'undefined' != typeof field ) {\n                field.set(atts);\n            }\n        });\n\n        Backbone.Radio.channel( 'fields' ).trigger( 'reset:collection', fieldsCollection );\n    }\n});\n","jQuery( document ).ready( function( $ ) {\n    var nfSaveProgress = new NF_SaveProgress();\n    nfSaveProgress.start();\n});\n"]}